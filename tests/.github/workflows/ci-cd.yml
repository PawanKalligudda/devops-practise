name: DevOps Portfolio CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting (if applicable)
      run: |
        # Add linting commands here if you have ESLint configured
        echo "Linting step - add your linter commands here"

    - name: Run unit tests
      run: npm test -- --ci --coverage --watchAll=false

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  docker-build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub (optional)
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/devops-portfolio
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        # Build the image for testing
        docker build -t devops-portfolio:test .

        # Run container in background
        docker run -d -p 8080:80 --name test-container devops-portfolio:test

        # Wait for container to be ready
        sleep 10

        # Test that the container is serving content
        curl -f http://localhost:8080 || exit 1

        # Check that Docker-specific content is present
        curl -s http://localhost:8080 | grep -q "DevOps Learning Journey" || exit 1

        # Clean up
        docker stop test-container
        docker rm test-container

    - name: Push Docker image (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "In a real scenario, this would deploy to your staging server"
        echo "Commands might include:"
        echo "  ‚Ä¢ SSH to staging server"
        echo "  ‚Ä¢ Pull latest Docker image"
        echo "  ‚Ä¢ Update container with zero-downtime"
        echo "  ‚Ä¢ Run smoke tests"

  deploy-production:
    needs: [test, docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        echo "üéâ Deploying to production environment..."
        echo "In a real scenario, this would deploy to your production server"
        echo "Commands might include:"
        echo "  ‚Ä¢ SSH to production server"
        echo "  ‚Ä¢ Pull latest Docker image"
        echo "  ‚Ä¢ Update container with blue-green deployment"
        echo "  ‚Ä¢ Run health checks"
        echo "  ‚Ä¢ Update load balancer"

  notification:
    needs: [test, docker-build]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.docker-build.result }}" == "success" ]; then
          echo "‚úÖ Pipeline succeeded! All tests passed and Docker image built successfully."
        else
          echo "‚ùå Pipeline failed. Check the logs for details."
        fi

        echo "This is where you would send notifications to:"
        echo "  ‚Ä¢ Slack/Discord channels"
        echo "  ‚Ä¢ Email notifications"
        echo "  ‚Ä¢ Project management tools"
